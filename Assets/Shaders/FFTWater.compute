#pragma kernel CS_InitializeSpectrum
#pragma kernel CS_UpdateSpectrum
#pragma kernel CS_DFT

#define PI 3.14159265358979323846

RWTexture2D<float4> _InitialSpectrumTex;
RWTexture2D<float2> _ProgressedSpectrumTex;
RWTexture2D<float4> _HeightTex, _NormalTex;
float _FrameTime;
int _N, _LengthScale;

float2 ComplexMult(float2 a, float2 b) {
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float2 EulerFormula(float x) {
    return float2(cos(x), sin(x));
}

float hash(uint n) {
    // integer hash copied from Hugo Elias
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

float2 UniformToGaussian(float u1, float u2) {
    float R = sqrt(-2.0f * log(u1));
    float theta = 2.0f * PI * u2;

    return (float2(R * cos(theta), R * sin(theta)));
}

float PhillipsSpectrum(float2 k) {
    float kMag = length(k);
    if (kMag < 0.0001f) return 0.0f;

    float A = 0.2f;
    float V = 1.28f;
    float L = V * V / 9.8f;
    float l = 0.25f;
    float2 w = normalize(float2(-1.0f, 1.0f));
    float kdotw = dot(normalize(k), w);

    return A * (exp(-1.0f / ((kMag * L) * (kMag * L))) / kMag * kMag * kMag * kMag) * kdotw * kdotw * exp(-k * k * l * l);
}

float2 SampleSpectrum(float2 k, float2 rand) {
    return (1.0f / sqrt(2.0f)) * rand * sqrt(PhillipsSpectrum(k));
}

[numthreads(8,8,1)]
void CS_InitializeSpectrum(uint3 id : SV_DISPATCHTHREADID) {
    uint seed = id.x + _N * id.y + _N;

    float halfN = _N / 2.0f;

    float n = id.x - halfN;
    float m = id.y - halfN;

    float2 K = float2(n, m) * 2.0f * PI / _LengthScale;

    float4 uniformRandSamples = float4(hash(seed), hash(seed * seed), hash(seed * seed * seed), hash(seed * seed * seed * 0.25));
    float2 gauss1 = UniformToGaussian(uniformRandSamples.x, uniformRandSamples.y);
    float2 gauss2 = UniformToGaussian(uniformRandSamples.z, uniformRandSamples.w);

    float w_0 = 2.0f * PI / 200.0f;
    float dispersion = floor(sqrt(9.8f * length(K)) / w_0) * w_0;

    float2 h0 = SampleSpectrum(K, float2(gauss1.x, gauss2.y));
    float2 h0conj = SampleSpectrum(-K, float2(gauss1.y, gauss2.x));

    _InitialSpectrumTex[id.xy] = float4(h0, h0conj);
}

[numthreads(8,8,1)]
void CS_UpdateSpectrum(uint3 id : SV_DISPATCHTHREADID) {
    float4 initialSignal = _InitialSpectrumTex[id.xy];
    float2 h0 = initialSignal.xy;
    float2 h0conj = initialSignal.zw;

    float halfN = _N / 2.0f;

    float n = id.x - halfN;
    float m = id.y - halfN;

    float2 K = float2(n, m) * 2.0f * PI / _LengthScale;
    float w_0 = 2.0f * PI / 200.0f;
    float dispersion = floor(sqrt(9.8f * length(K)) / w_0) * w_0 * _FrameTime;

    _ProgressedSpectrumTex[id.xy] = ComplexMult(h0, EulerFormula(dispersion)) + ComplexMult(h0conj, EulerFormula(-dispersion));
}

[numthreads(8, 8, 1)]
void CS_DFT(uint3 id : SV_DISPATCHTHREADID) {
    float halfN = _N / 2.0f;
    
    float2 x = id.xy - halfN;

    float2 h = 0.0f;

    for (int m = 0; m < _N; ++m) {
        float kz = 2.0f * PI * (m - halfN) / _LengthScale;
        for (int n = 0; n < _N; ++n) {
            float kx = 2.0f * PI * (n - halfN) / _LengthScale;
            float2 K = float2(kx, kz);
            float kMag = length(K);
            float kdotx = dot(K, x);

            float2 c = EulerFormula(kdotx);
            float2 htilde = ComplexMult(_ProgressedSpectrumTex[uint2(n, m)], c);
            if (kMag < 0.001f) htilde = 0.0f;
            h += htilde;
        }
    }
    
    _HeightTex[id.xy] = h.x;
}